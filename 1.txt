./src/mat.h:61:class NCNN_EXPORT Mat
./src/mat.h:574:class NCNN_EXPORT VkMat
./src/mat.h:684:class NCNN_EXPORT VkImageMat
./src/mat.h:815:NCNN_EXPORT void yuv420sp2rgb(const unsigned char* yuv420sp, int w, int h, unsigned char* rgb);
./src/mat.h:817:NCNN_EXPORT void yuv420sp2rgb_nv12(const unsigned char* yuv420sp, int w, int h, unsigned char* rgb);
./src/mat.h:819:NCNN_EXPORT void yuv420sp2rgb_half(const unsigned char* yuv420sp, int w, int h, unsigned char* rgb);
./src/mat.h:821:NCNN_EXPORT void resize_bilinear_c1(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h);
./src/mat.h:822:NCNN_EXPORT void resize_bilinear_c2(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h);
./src/mat.h:823:NCNN_EXPORT void resize_bilinear_c3(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h);
./src/mat.h:824:NCNN_EXPORT void resize_bilinear_c4(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h);
./src/mat.h:826:NCNN_EXPORT void resize_bilinear_c1(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride);
./src/mat.h:827:NCNN_EXPORT void resize_bilinear_c2(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride);
./src/mat.h:828:NCNN_EXPORT void resize_bilinear_c3(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride);
./src/mat.h:829:NCNN_EXPORT void resize_bilinear_c4(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride);
./src/mat.h:831:NCNN_EXPORT void resize_bilinear_yuv420sp(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h);
./src/mat.h:846:NCNN_EXPORT void kanna_rotate_c1(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, int type);
./src/mat.h:847:NCNN_EXPORT void kanna_rotate_c2(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, int type);
./src/mat.h:848:NCNN_EXPORT void kanna_rotate_c3(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, int type);
./src/mat.h:849:NCNN_EXPORT void kanna_rotate_c4(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, int type);
./src/mat.h:851:NCNN_EXPORT void kanna_rotate_c1(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, int type);
./src/mat.h:852:NCNN_EXPORT void kanna_rotate_c2(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, int type);
./src/mat.h:853:NCNN_EXPORT void kanna_rotate_c3(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, int type);
./src/mat.h:854:NCNN_EXPORT void kanna_rotate_c4(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, int type);
./src/mat.h:856:NCNN_EXPORT void kanna_rotate_yuv420sp(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, int type);
./src/mat.h:860:NCNN_EXPORT void get_rotation_matrix(float angle, float scale, float dx, float dy, float* tm);
./src/mat.h:862:NCNN_EXPORT void get_affine_transform(const float* points_from, const float* points_to, int num_point, float* tm);
./src/mat.h:864:NCNN_EXPORT void invert_affine_transform(const float* tm, float* tm_inv);
./src/mat.h:866:NCNN_EXPORT void warpaffine_bilinear_c1(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, const float* tm, int type = 0, unsigned int v = 0);
./src/mat.h:867:NCNN_EXPORT void warpaffine_bilinear_c2(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, const float* tm, int type = 0, unsigned int v = 0);
./src/mat.h:868:NCNN_EXPORT void warpaffine_bilinear_c3(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, const float* tm, int type = 0, unsigned int v = 0);
./src/mat.h:869:NCNN_EXPORT void warpaffine_bilinear_c4(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, const float* tm, int type = 0, unsigned int v = 0);
./src/mat.h:871:NCNN_EXPORT void warpaffine_bilinear_c1(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, const float* tm, int type = 0, unsigned int v = 0);
./src/mat.h:872:NCNN_EXPORT void warpaffine_bilinear_c2(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, const float* tm, int type = 0, unsigned int v = 0);
./src/mat.h:873:NCNN_EXPORT void warpaffine_bilinear_c3(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, const float* tm, int type = 0, unsigned int v = 0);
./src/mat.h:874:NCNN_EXPORT void warpaffine_bilinear_c4(const unsigned char* src, int srcw, int srch, int srcstride, unsigned char* dst, int w, int h, int stride, const float* tm, int type = 0, unsigned int v = 0);
./src/mat.h:876:NCNN_EXPORT void warpaffine_bilinear_yuv420sp(const unsigned char* src, int srcw, int srch, unsigned char* dst, int w, int h, const float* tm, int type = 0, unsigned int v = 0);
./src/mat.h:881:NCNN_EXPORT unsigned short float32_to_float16(float value);
./src/mat.h:883:NCNN_EXPORT float float16_to_float32(unsigned short value);
./src/mat.h:885:NCNN_EXPORT inline unsigned short float32_to_bfloat16(float value)
./src/mat.h:897:NCNN_EXPORT inline float bfloat16_to_float32(unsigned short value)
./src/mat.h:909:NCNN_EXPORT inline uint16x4_t vcvt_bf16_f32(float32x4_t _v)
./src/mat.h:913:NCNN_EXPORT inline float32x4_t vcvt_f32_bf16(uint16x4_t _v)
./src/mat.h:926:NCNN_EXPORT void copy_make_border(const Mat& src, Mat& dst, int top, int bottom, int left, int right, int type, float v, const Option& opt = Option());
./src/mat.h:927:NCNN_EXPORT void copy_cut_border(const Mat& src, Mat& dst, int top, int bottom, int left, int right, const Option& opt = Option());
./src/mat.h:928:NCNN_EXPORT void resize_nearest(const Mat& src, Mat& dst, int w, int h, const Option& opt = Option());
./src/mat.h:929:NCNN_EXPORT void resize_bilinear(const Mat& src, Mat& dst, int w, int h, const Option& opt = Option());
./src/mat.h:930:NCNN_EXPORT void resize_bicubic(const Mat& src, Mat& dst, int w, int h, const Option& opt = Option());
./src/mat.h:931:NCNN_EXPORT void convert_packing(const Mat& src, Mat& dst, int elempack, const Option& opt = Option());
./src/mat.h:932:NCNN_EXPORT void flatten(const Mat& src, Mat& dst, const Option& opt = Option());
./src/mat.h:933:NCNN_EXPORT void cast_float32_to_float16(const Mat& src, Mat& dst, const Option& opt = Option());
./src/mat.h:934:NCNN_EXPORT void cast_float16_to_float32(const Mat& src, Mat& dst, const Option& opt = Option());
./src/mat.h:935:NCNN_EXPORT void cast_int8_to_float32(const Mat& src, Mat& dst, const Option& opt = Option());
./src/mat.h:936:NCNN_EXPORT void cast_float32_to_bfloat16(const Mat& src, Mat& dst, const Option& opt = Option());
./src/mat.h:937:NCNN_EXPORT void cast_bfloat16_to_float32(const Mat& src, Mat& dst, const Option& opt = Option());
./src/mat.h:938:NCNN_EXPORT void quantize_to_int8(const Mat& src, Mat& dst, const Mat& scale_data, const Option& opt = Option());
./src/mat.h:939:NCNN_EXPORT void dequantize_from_int32(const Mat& src, Mat& dst, const Mat& scale_data, const Mat& bias_data, const Option& opt = Option());
./src/mat.h:940:NCNN_EXPORT void requantize_from_int32_to_int8(const Mat& src, Mat& dst, const Mat& scale_in_data, const Mat& scale_out_data, const Mat& bias_data, int activation_type, const Mat& activation_params, const Option& opt = Option());
./src/layer.h:48:class NCNN_EXPORT Layer
./src/layer.h:222:NCNN_EXPORT int layer_to_index(const char* type);
./src/layer.h:224:NCNN_EXPORT Layer* create_layer(const char* type);
./src/layer.h:227:NCNN_EXPORT Layer* create_layer(int index);
./src/pipelinecache.h:33:class NCNN_EXPORT PipelineCache
./src/simpleocv.h:34:struct NCNN_EXPORT Size
./src/simpleocv.h:138:struct NCNN_EXPORT Mat
./src/simpleocv.h:303:NCNN_EXPORT Mat imread(const std::string& path, int flags);
./src/simpleocv.h:304:NCNN_EXPORT void imwrite(const std::string& path, const Mat& m);
./src/simpleocv.h:307:NCNN_EXPORT void resize(const Mat& src, Mat& dst, const Size& size, float sw = 0.f, float sh = 0.f, int flags = 0);
./src/gpu.h:26:struct NCNN_EXPORT CudaGpuInfo {
./src/gpu.h:32:class NCNN_EXPORT CudaDevice
./src/gpu.h:46:NCNN_EXPORT void try_initialize_cuda_gpu_instances();
./src/gpu.h:47:NCNN_EXPORT int get_cuda_gpu_count();
./src/gpu.h:48:NCNN_EXPORT int get_current_cuda_gpu_index();
./src/gpu.h:49:NCNN_EXPORT const CudaGpuInfo get_cuda_gpu_info(int device_index);
./src/gpu.h:50:NCNN_EXPORT CudaDevice* get_cuda_gpu_device(int cuda_device_index);
./src/gpu.h:51:NCNN_EXPORT CudaDevice* get_current_gpu_device();
./src/gpu.h:68:NCNN_EXPORT int create_gpu_instance();
./src/gpu.h:69:NCNN_EXPORT void destroy_gpu_instance();
./src/gpu.h:110:NCNN_EXPORT int get_gpu_count();
./src/gpu.h:111:NCNN_EXPORT int get_default_gpu_index();
./src/gpu.h:114:class NCNN_EXPORT GpuInfo
./src/gpu.h:231:NCNN_EXPORT const GpuInfo& get_gpu_info(int device_index = get_default_gpu_index());
./src/gpu.h:238:class NCNN_EXPORT VulkanDevice
./src/gpu.h:355:NCNN_EXPORT VulkanDevice* get_gpu_device(int device_index = get_default_gpu_index());
./src/gpu.h:358:NCNN_EXPORT int compile_spirv_module(const char* comp_string, const Option& opt, std::vector<uint32_t>& spirv);
./src/gpu.h:359:NCNN_EXPORT int compile_spirv_module(const char* comp_data, int comp_data_size, const Option& opt, std::vector<uint32_t>& spirv);
./src/gpu.h:360:NCNN_EXPORT int compile_spirv_module(int shader_type_index, const Option& opt, std::vector<uint32_t>& spirv);
./src/gpu.h:363:class NCNN_EXPORT ShaderInfo
./src/gpu.h:382:NCNN_EXPORT int resolve_shader_info(const uint32_t* spv_data, size_t spv_data_size, ShaderInfo& shader_info);
./src/c_api.h:26:NCNN_EXPORT const char* ncnn_version();
./src/c_api.h:30:struct NCNN_EXPORT __ncnn_allocator_t
./src/c_api.h:38:NCNN_EXPORT ncnn_allocator_t ncnn_allocator_create_pool_allocator();
./src/c_api.h:39:NCNN_EXPORT ncnn_allocator_t ncnn_allocator_create_unlocked_pool_allocator();
./src/c_api.h:40:NCNN_EXPORT void ncnn_allocator_destroy(ncnn_allocator_t allocator);
./src/c_api.h:45:NCNN_EXPORT ncnn_option_t ncnn_option_create();
./src/c_api.h:46:NCNN_EXPORT void ncnn_option_destroy(ncnn_option_t opt);
./src/c_api.h:48:NCNN_EXPORT int ncnn_option_get_num_threads(const ncnn_option_t opt);
./src/c_api.h:49:NCNN_EXPORT void ncnn_option_set_num_threads(ncnn_option_t opt, int num_threads);
./src/c_api.h:51:NCNN_EXPORT int ncnn_option_get_use_vulkan_compute(const ncnn_option_t opt);
./src/c_api.h:52:NCNN_EXPORT void ncnn_option_set_use_vulkan_compute(ncnn_option_t opt, int use_vulkan_compute);
./src/c_api.h:57:NCNN_EXPORT ncnn_mat_t ncnn_mat_create_1d(int w, ncnn_allocator_t allocator);
./src/c_api.h:58:NCNN_EXPORT ncnn_mat_t ncnn_mat_create_2d(int w, int h, ncnn_allocator_t allocator);
./src/c_api.h:59:NCNN_EXPORT ncnn_mat_t ncnn_mat_create_3d(int w, int h, int c, ncnn_allocator_t allocator);
./src/c_api.h:60:NCNN_EXPORT ncnn_mat_t ncnn_mat_create_external_1d(int w, void* data, ncnn_allocator_t allocator);
./src/c_api.h:61:NCNN_EXPORT ncnn_mat_t ncnn_mat_create_external_2d(int w, int h, void* data, ncnn_allocator_t allocator);
./src/c_api.h:62:NCNN_EXPORT ncnn_mat_t ncnn_mat_create_external_3d(int w, int h, int c, void* data, ncnn_allocator_t allocator);
./src/c_api.h:63:NCNN_EXPORT ncnn_mat_t ncnn_mat_create_1d_elem(int w, size_t elemsize, int elempack, ncnn_allocator_t allocator);
./src/c_api.h:64:NCNN_EXPORT ncnn_mat_t ncnn_mat_create_2d_elem(int w, int h, size_t elemsize, int elempack, ncnn_allocator_t allocator);
./src/c_api.h:65:NCNN_EXPORT ncnn_mat_t ncnn_mat_create_3d_elem(int w, int h, int c, size_t elemsize, int elempack, ncnn_allocator_t allocator);
./src/c_api.h:66:NCNN_EXPORT ncnn_mat_t ncnn_mat_create_external_1d_elem(int w, void* data, size_t elemsize, int elempack, ncnn_allocator_t allocator);
./src/c_api.h:67:NCNN_EXPORT ncnn_mat_t ncnn_mat_create_external_2d_elem(int w, int h, void* data, size_t elemsize, int elempack, ncnn_allocator_t allocator);
./src/c_api.h:68:NCNN_EXPORT ncnn_mat_t ncnn_mat_create_external_3d_elem(int w, int h, int c, void* data, size_t elemsize, int elempack, ncnn_allocator_t allocator);
./src/c_api.h:69:NCNN_EXPORT void ncnn_mat_destroy(ncnn_mat_t mat);
./src/c_api.h:71:NCNN_EXPORT void ncnn_mat_fill_float(ncnn_mat_t mat, float v);
./src/c_api.h:73:NCNN_EXPORT ncnn_mat_t ncnn_mat_clone(const ncnn_mat_t mat, ncnn_allocator_t allocator);
./src/c_api.h:74:NCNN_EXPORT ncnn_mat_t ncnn_mat_reshape_1d(const ncnn_mat_t mat, int w, ncnn_allocator_t allocator);
./src/c_api.h:75:NCNN_EXPORT ncnn_mat_t ncnn_mat_reshape_2d(const ncnn_mat_t mat, int w, int h, ncnn_allocator_t allocator);
./src/c_api.h:76:NCNN_EXPORT ncnn_mat_t ncnn_mat_reshape_3d(const ncnn_mat_t mat, int w, int h, int c, ncnn_allocator_t allocator);
./src/c_api.h:78:NCNN_EXPORT int ncnn_mat_get_dims(const ncnn_mat_t mat);
./src/c_api.h:79:NCNN_EXPORT int ncnn_mat_get_w(const ncnn_mat_t mat);
./src/c_api.h:80:NCNN_EXPORT int ncnn_mat_get_h(const ncnn_mat_t mat);
./src/c_api.h:81:NCNN_EXPORT int ncnn_mat_get_c(const ncnn_mat_t mat);
./src/c_api.h:82:NCNN_EXPORT size_t ncnn_mat_get_elemsize(const ncnn_mat_t mat);
./src/c_api.h:83:NCNN_EXPORT int ncnn_mat_get_elempack(const ncnn_mat_t mat);
./src/c_api.h:84:NCNN_EXPORT size_t ncnn_mat_get_cstep(const ncnn_mat_t mat);
./src/c_api.h:85:NCNN_EXPORT void* ncnn_mat_get_data(const ncnn_mat_t mat);
./src/c_api.h:87:NCNN_EXPORT void* ncnn_mat_get_channel_data(const ncnn_mat_t mat, int c);
./src/c_api.h:98:NCNN_EXPORT ncnn_mat_t ncnn_mat_from_pixels(const unsigned char* pixels, int type, int w, int h, int stride, ncnn_allocator_t allocator);
./src/c_api.h:99:NCNN_EXPORT ncnn_mat_t ncnn_mat_from_pixels_resize(const unsigned char* pixels, int type, int w, int h, int stride, int target_width, int target_height, ncnn_allocator_t allocator);
./src/c_api.h:100:NCNN_EXPORT ncnn_mat_t ncnn_mat_from_pixels_roi(const unsigned char* pixels, int type, int w, int h, int stride, int roix, int roiy, int roiw, int roih, ncnn_allocator_t allocator);
./src/c_api.h:101:NCNN_EXPORT ncnn_mat_t ncnn_mat_from_pixels_roi_resize(const unsigned char* pixels, int type, int w, int h, int stride, int roix, int roiy, int roiw, int roih, int target_width, int target_height, ncnn_allocator_t allocator);
./src/c_api.h:102:NCNN_EXPORT void ncnn_mat_to_pixels(const ncnn_mat_t mat, unsigned char* pixels, int type, int stride);
./src/c_api.h:103:NCNN_EXPORT void ncnn_mat_to_pixels_resize(const ncnn_mat_t mat, unsigned char* pixels, int type, int target_width, int target_height, int target_stride);
./src/c_api.h:107:NCNN_EXPORT void ncnn_mat_substract_mean_normalize(ncnn_mat_t mat, const float* mean_vals, const float* norm_vals);
./src/c_api.h:109:NCNN_EXPORT void ncnn_convert_packing(const ncnn_mat_t src, ncnn_mat_t* dst, int elempack, const ncnn_option_t opt);
./src/c_api.h:110:NCNN_EXPORT void ncnn_flatten(const ncnn_mat_t src, ncnn_mat_t* dst, const ncnn_option_t opt);
./src/c_api.h:116:NCNN_EXPORT const char* ncnn_blob_get_name(const ncnn_blob_t blob);
./src/c_api.h:119:NCNN_EXPORT int ncnn_blob_get_producer(const ncnn_blob_t blob);
./src/c_api.h:120:NCNN_EXPORT int ncnn_blob_get_consumer(const ncnn_blob_t blob);
./src/c_api.h:122:NCNN_EXPORT void ncnn_blob_get_shape(const ncnn_blob_t blob, int* dims, int* w, int* h, int* c);
./src/c_api.h:127:NCNN_EXPORT ncnn_paramdict_t ncnn_paramdict_create();
./src/c_api.h:128:NCNN_EXPORT void ncnn_paramdict_destroy(ncnn_paramdict_t pd);
./src/c_api.h:130:NCNN_EXPORT int ncnn_paramdict_get_type(const ncnn_paramdict_t pd, int id);
./src/c_api.h:132:NCNN_EXPORT int ncnn_paramdict_get_int(const ncnn_paramdict_t pd, int id, int def);
./src/c_api.h:133:NCNN_EXPORT float ncnn_paramdict_get_float(const ncnn_paramdict_t pd, int id, float def);
./src/c_api.h:134:NCNN_EXPORT ncnn_mat_t ncnn_paramdict_get_array(const ncnn_paramdict_t pd, int id, const ncnn_mat_t def);
./src/c_api.h:136:NCNN_EXPORT void ncnn_paramdict_set_int(ncnn_paramdict_t pd, int id, int i);
./src/c_api.h:137:NCNN_EXPORT void ncnn_paramdict_set_float(ncnn_paramdict_t pd, int id, float f);
./src/c_api.h:138:NCNN_EXPORT void ncnn_paramdict_set_array(ncnn_paramdict_t pd, int id, const ncnn_mat_t v);
./src/c_api.h:142:struct NCNN_EXPORT __ncnn_datareader_t
./src/c_api.h:152:NCNN_EXPORT ncnn_datareader_t ncnn_datareader_create();
./src/c_api.h:154:NCNN_EXPORT ncnn_datareader_t ncnn_datareader_create_from_stdio(FILE* fp);
./src/c_api.h:156:NCNN_EXPORT ncnn_datareader_t ncnn_datareader_create_from_memory(const unsigned char** mem);
./src/c_api.h:157:NCNN_EXPORT void ncnn_datareader_destroy(ncnn_datareader_t dr);
./src/c_api.h:161:struct NCNN_EXPORT __ncnn_modelbin_t
./src/c_api.h:170:NCNN_EXPORT ncnn_modelbin_t ncnn_modelbin_create_from_datareader(const ncnn_datareader_t dr);
./src/c_api.h:171:NCNN_EXPORT ncnn_modelbin_t ncnn_modelbin_create_from_mat_array(const ncnn_mat_t* weights, int n);
./src/c_api.h:172:NCNN_EXPORT void ncnn_modelbin_destroy(ncnn_modelbin_t mb);
./src/c_api.h:176:struct NCNN_EXPORT __ncnn_layer_t
./src/c_api.h:193:NCNN_EXPORT ncnn_layer_t ncnn_layer_create();
./src/c_api.h:194:NCNN_EXPORT ncnn_layer_t ncnn_layer_create_by_typeindex(int typeindex);
./src/c_api.h:196:NCNN_EXPORT ncnn_layer_t ncnn_layer_create_by_type(const char* type);
./src/c_api.h:198:NCNN_EXPORT void ncnn_layer_destroy(ncnn_layer_t layer);
./src/c_api.h:201:NCNN_EXPORT const char* ncnn_layer_get_name(const ncnn_layer_t layer);
./src/c_api.h:204:NCNN_EXPORT int ncnn_layer_get_typeindex(const ncnn_layer_t layer);
./src/c_api.h:206:NCNN_EXPORT const char* ncnn_layer_get_type(const ncnn_layer_t layer);
./src/c_api.h:209:NCNN_EXPORT int ncnn_layer_get_one_blob_only(const ncnn_layer_t layer);
./src/c_api.h:210:NCNN_EXPORT int ncnn_layer_get_support_inplace(const ncnn_layer_t layer);
./src/c_api.h:211:NCNN_EXPORT int ncnn_layer_get_support_vulkan(const ncnn_layer_t layer);
./src/c_api.h:212:NCNN_EXPORT int ncnn_layer_get_support_packing(const ncnn_layer_t layer);
./src/c_api.h:213:NCNN_EXPORT int ncnn_layer_get_support_bf16_storage(const ncnn_layer_t layer);
./src/c_api.h:214:NCNN_EXPORT int ncnn_layer_get_support_fp16_storage(const ncnn_layer_t layer);
./src/c_api.h:215:NCNN_EXPORT int ncnn_layer_get_support_image_storage(const ncnn_layer_t layer);
./src/c_api.h:217:NCNN_EXPORT void ncnn_layer_set_one_blob_only(ncnn_layer_t layer, int enable);
./src/c_api.h:218:NCNN_EXPORT void ncnn_layer_set_support_inplace(ncnn_layer_t layer, int enable);
./src/c_api.h:219:NCNN_EXPORT void ncnn_layer_set_support_vulkan(ncnn_layer_t layer, int enable);
./src/c_api.h:220:NCNN_EXPORT void ncnn_layer_set_support_packing(ncnn_layer_t layer, int enable);
./src/c_api.h:221:NCNN_EXPORT void ncnn_layer_set_support_bf16_storage(ncnn_layer_t layer, int enable);
./src/c_api.h:222:NCNN_EXPORT void ncnn_layer_set_support_fp16_storage(ncnn_layer_t layer, int enable);
./src/c_api.h:223:NCNN_EXPORT void ncnn_layer_set_support_image_storage(ncnn_layer_t layer, int enable);
./src/c_api.h:225:NCNN_EXPORT int ncnn_layer_get_bottom_count(const ncnn_layer_t layer);
./src/c_api.h:226:NCNN_EXPORT int ncnn_layer_get_bottom(const ncnn_layer_t layer, int i);
./src/c_api.h:227:NCNN_EXPORT int ncnn_layer_get_top_count(const ncnn_layer_t layer);
./src/c_api.h:228:NCNN_EXPORT int ncnn_layer_get_top(const ncnn_layer_t layer, int i);
./src/c_api.h:230:NCNN_EXPORT void ncnn_blob_get_bottom_shape(const ncnn_layer_t layer, int i, int* dims, int* w, int* h, int* c);
./src/c_api.h:231:NCNN_EXPORT void ncnn_blob_get_top_shape(const ncnn_layer_t layer, int i, int* dims, int* w, int* h, int* c);
./src/c_api.h:255:NCNN_EXPORT ncnn_net_t ncnn_net_create();
./src/c_api.h:256:NCNN_EXPORT void ncnn_net_destroy(ncnn_net_t net);
./src/c_api.h:258:NCNN_EXPORT void ncnn_net_set_option(ncnn_net_t net, ncnn_option_t opt);
./src/c_api.h:261:NCNN_EXPORT void ncnn_net_register_custom_layer_by_type(ncnn_net_t net, const char* type, ncnn_layer_creator_t creator, ncnn_layer_destroyer_t destroyer, void* userdata);
./src/c_api.h:263:NCNN_EXPORT void ncnn_net_register_custom_layer_by_typeindex(ncnn_net_t net, int typeindex, ncnn_layer_creator_t creator, ncnn_layer_destroyer_t destroyer, void* userdata);
./src/c_api.h:267:NCNN_EXPORT int ncnn_net_load_param(ncnn_net_t net, const char* path);
./src/c_api.h:269:NCNN_EXPORT int ncnn_net_load_param_bin(ncnn_net_t net, const char* path);
./src/c_api.h:270:NCNN_EXPORT int ncnn_net_load_model(ncnn_net_t net, const char* path);
./src/c_api.h:274:NCNN_EXPORT int ncnn_net_load_param_memory(ncnn_net_t net, const char* mem);
./src/c_api.h:276:NCNN_EXPORT int ncnn_net_load_param_bin_memory(ncnn_net_t net, const unsigned char* mem);
./src/c_api.h:277:NCNN_EXPORT int ncnn_net_load_model_memory(ncnn_net_t net, const unsigned char* mem);
./src/c_api.h:280:NCNN_EXPORT int ncnn_net_load_param_datareader(ncnn_net_t net, const ncnn_datareader_t dr);
./src/c_api.h:282:NCNN_EXPORT int ncnn_net_load_param_bin_datareader(ncnn_net_t net, const ncnn_datareader_t dr);
./src/c_api.h:283:NCNN_EXPORT int ncnn_net_load_model_datareader(ncnn_net_t net, const ncnn_datareader_t dr);
./src/c_api.h:285:NCNN_EXPORT void ncnn_net_clear(ncnn_net_t net);
./src/c_api.h:290:NCNN_EXPORT ncnn_extractor_t ncnn_extractor_create(ncnn_net_t net);
./src/c_api.h:291:NCNN_EXPORT void ncnn_extractor_destroy(ncnn_extractor_t ex);
./src/c_api.h:293:NCNN_EXPORT void ncnn_extractor_set_option(ncnn_extractor_t ex, const ncnn_option_t opt);
./src/c_api.h:296:NCNN_EXPORT int ncnn_extractor_input(ncnn_extractor_t ex, const char* name, const ncnn_mat_t mat);
./src/c_api.h:297:NCNN_EXPORT int ncnn_extractor_extract(ncnn_extractor_t ex, const char* name, ncnn_mat_t* mat);
./src/c_api.h:299:NCNN_EXPORT int ncnn_extractor_input_index(ncnn_extractor_t ex, int index, const ncnn_mat_t mat);
./src/c_api.h:300:NCNN_EXPORT int ncnn_extractor_extract_index(ncnn_extractor_t ex, int index, ncnn_mat_t* mat);
./src/modelbin.h:23:class NCNN_EXPORT ModelBin
./src/modelbin.h:42:class NCNN_EXPORT ModelBinFromDataReader : public ModelBin
./src/modelbin.h:59:class NCNN_EXPORT ModelBinFromMatArray : public ModelBin
./src/modelbin.h:77:class NCNN_EXPORT CudaModelBinFromDataReader : public ModelBinFromDataReader
./src/modelbin.h:84:class NCNN_EXPORT CudaModelBinFromMatArray : public ModelBinFromMatArray
./src/simpleomp.h:31:NCNN_EXPORT int omp_get_max_threads();
./src/simpleomp.h:33:NCNN_EXPORT void omp_set_num_threads(int num_threads);
./src/simpleomp.h:35:NCNN_EXPORT int omp_get_dynamic();
./src/simpleomp.h:37:NCNN_EXPORT void omp_set_dynamic(int dynamic);
./src/simpleomp.h:39:NCNN_EXPORT int omp_get_num_threads();
./src/simpleomp.h:41:NCNN_EXPORT int omp_get_thread_num();
./src/simpleomp.h:43:NCNN_EXPORT int kmp_get_blocktime();
./src/simpleomp.h:45:NCNN_EXPORT void kmp_set_blocktime(int blocktime);
./src/blob.h:23:class NCNN_EXPORT Blob
./src/option.h:35:class NCNN_EXPORT Option
./src/platform.h.in:60:class NCNN_EXPORT Mutex
./src/platform.h.in:73:class NCNN_EXPORT ConditionVariable
./src/platform.h.in:86:class NCNN_EXPORT Thread
./src/platform.h.in:104:class NCNN_EXPORT ThreadLocalStorage
./src/platform.h.in:115:class NCNN_EXPORT Mutex
./src/platform.h.in:127:class NCNN_EXPORT ConditionVariable
./src/platform.h.in:139:class NCNN_EXPORT Thread
./src/platform.h.in:149:class NCNN_EXPORT ThreadLocalStorage
./src/platform.h.in:161:class NCNN_EXPORT Mutex
./src/platform.h.in:170:class NCNN_EXPORT ConditionVariable
./src/platform.h.in:180:class NCNN_EXPORT Thread
./src/platform.h.in:188:class NCNN_EXPORT ThreadLocalStorage
./src/platform.h.in:200:class NCNN_EXPORT MutexLockGuard
./src/paramdict.h:28:class NCNN_EXPORT ParamDict
./src/allocator.h:155:class NCNN_EXPORT Allocator
./src/allocator.h:164:class NCNN_EXPORT PoolAllocator : public Allocator
./src/allocator.h:189:class NCNN_EXPORT UnlockedPoolAllocator : public Allocator
./src/allocator.h:217:class NCNN_EXPORT CudaAllocator  : public Allocator
./src/allocator.h:235:class NCNN_EXPORT CudaPoolAllocator : public CudaAllocator
./src/allocator.h:259:class NCNN_EXPORT CudaUnlockedPoolAllocator : public CudaAllocator
./src/allocator.h:291:class NCNN_EXPORT VkBufferMemory
./src/allocator.h:311:class NCNN_EXPORT VkImageMemory
./src/allocator.h:342:class NCNN_EXPORT VkAllocator
./src/allocator.h:376:class NCNN_EXPORT VkBlobAllocator : public VkAllocator
./src/allocator.h:400:class NCNN_EXPORT VkWeightAllocator : public VkAllocator
./src/allocator.h:425:class NCNN_EXPORT VkStagingAllocator : public VkAllocator
./src/allocator.h:453:class NCNN_EXPORT VkWeightStagingAllocator : public VkAllocator
./src/allocator.h:475:class NCNN_EXPORT VkAndroidHardwareBufferImageAllocator : public VkAllocator
./src/simplestl.h:29:NCNN_EXPORT void* operator new(size_t size);
./src/simplestl.h:30:NCNN_EXPORT void* operator new[](size_t size);
./src/simplestl.h:32:NCNN_EXPORT void* operator new(size_t size, void* ptr);
./src/simplestl.h:33:NCNN_EXPORT void* operator new[](size_t size, void* ptr);
./src/simplestl.h:35:NCNN_EXPORT void operator delete(void* ptr);
./src/simplestl.h:36:NCNN_EXPORT void operator delete[](void* ptr);
./src/simplestl.h:39:NCNN_EXPORT void operator delete(void* ptr, size_t sz);
./src/simplestl.h:40:NCNN_EXPORT void operator delete[](void* ptr, size_t sz);
./src/simplestl.h:43:NCNN_EXPORT void operator delete(void* ptr, void* voidptr2);
./src/simplestl.h:44:NCNN_EXPORT void operator delete[](void* ptr, void* voidptr2);
./src/simplestl.h:522:struct NCNN_EXPORT string : public vector<char>
./src/cpu.h:28:class NCNN_EXPORT CpuSet
./src/cpu.h:49:NCNN_EXPORT int cpu_support_arm_neon();
./src/cpu.h:51:NCNN_EXPORT int cpu_support_arm_vfpv4();
./src/cpu.h:53:NCNN_EXPORT int cpu_support_arm_asimdhp();
./src/cpu.h:56:NCNN_EXPORT int cpu_support_x86_avx2();
./src/cpu.h:59:NCNN_EXPORT int cpu_support_riscv_v();
./src/cpu.h:61:NCNN_EXPORT int cpu_support_riscv_zfh();
./src/cpu.h:64:NCNN_EXPORT int get_cpu_count();
./src/cpu.h:65:NCNN_EXPORT int get_little_cpu_count();
./src/cpu.h:66:NCNN_EXPORT int get_big_cpu_count();
./src/cpu.h:76:NCNN_EXPORT int get_cpu_powersave();
./src/cpu.h:77:NCNN_EXPORT int set_cpu_powersave(int powersave);
./src/cpu.h:80:NCNN_EXPORT const CpuSet& get_cpu_thread_affinity_mask(int powersave);
./src/cpu.h:83:NCNN_EXPORT int set_cpu_thread_affinity(const CpuSet& thread_affinity_mask);
./src/cpu.h:86:NCNN_EXPORT int get_omp_num_threads();
./src/cpu.h:87:NCNN_EXPORT void set_omp_num_threads(int num_threads);
./src/cpu.h:89:NCNN_EXPORT int get_omp_dynamic();
./src/cpu.h:90:NCNN_EXPORT void set_omp_dynamic(int dynamic);
./src/cpu.h:92:NCNN_EXPORT int get_omp_thread_num();
./src/cpu.h:94:NCNN_EXPORT int get_kmp_blocktime();
./src/cpu.h:95:NCNN_EXPORT void set_kmp_blocktime(int time_ms);
./src/cpu.h:103:NCNN_EXPORT int get_flush_denormals();
./src/cpu.h:104:NCNN_EXPORT int set_flush_denormals(int flush_denormals);
./src/datareader.h:32:class NCNN_EXPORT DataReader
./src/datareader.h:51:class NCNN_EXPORT DataReaderFromStdio : public DataReader
./src/datareader.h:72:class NCNN_EXPORT DataReaderFromMemory : public DataReader
./src/datareader.h:94:class NCNN_EXPORT DataReaderFromAndroidAsset : public DataReader
./src/command.h:35:class NCNN_EXPORT VkCompute
./src/command.h:112:class NCNN_EXPORT VkTransfer
./src/net.h:38:class NCNN_EXPORT Net
./src/net.h:156:class NCNN_EXPORT Extractor
./src/benchmark.h:25:NCNN_EXPORT double get_current_time();
./src/benchmark.h:29:NCNN_EXPORT void benchmark(const Layer* layer, double start, double end);
./src/benchmark.h:30:NCNN_EXPORT void benchmark(const Layer* layer, const Mat& bottom_blob, Mat& top_blob, double start, double end);
./src/pipeline.h:35:class NCNN_EXPORT Pipeline
./src/pipeline.h:86:class NCNN_EXPORT ImportAndroidHardwareBufferPipeline : private Pipeline
./build/src/platform.h:60:class NCNN_EXPORT Mutex
./build/src/platform.h:73:class NCNN_EXPORT ConditionVariable
./build/src/platform.h:86:class NCNN_EXPORT Thread
./build/src/platform.h:104:class NCNN_EXPORT ThreadLocalStorage
./build/src/platform.h:115:class NCNN_EXPORT Mutex
./build/src/platform.h:127:class NCNN_EXPORT ConditionVariable
./build/src/platform.h:139:class NCNN_EXPORT Thread
./build/src/platform.h:149:class NCNN_EXPORT ThreadLocalStorage
./build/src/platform.h:161:class NCNN_EXPORT Mutex
./build/src/platform.h:170:class NCNN_EXPORT ConditionVariable
./build/src/platform.h:180:class NCNN_EXPORT Thread
./build/src/platform.h:188:class NCNN_EXPORT ThreadLocalStorage
./build/src/platform.h:200:class NCNN_EXPORT MutexLockGuard
./build/src/ncnn_export.h:2:#ifndef NCNN_EXPORT_H
./build/src/ncnn_export.h:3:#define NCNN_EXPORT_H
./build/src/ncnn_export.h:6:#  define NCNN_EXPORT
./build/src/ncnn_export.h:9:#  ifndef NCNN_EXPORT
./build/src/ncnn_export.h:12:#      define NCNN_EXPORT 
./build/src/ncnn_export.h:15:#      define NCNN_EXPORT 
./build/src/ncnn_export.h:29:#  define NCNN_DEPRECATED_EXPORT NCNN_EXPORT NCNN_DEPRECATED
./build/src/ncnn_export.h:42:#endif /* NCNN_EXPORT_H */
